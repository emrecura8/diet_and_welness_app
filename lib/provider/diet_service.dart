import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:the_diet_and_welness_app/models/diet_plan_model.dart';
import 'package:provider/provider.dart';
import 'package:the_diet_and_welness_app/provider/auth_service.dart';

// Placeholder for managing diet plan data
class DietService extends ChangeNotifier {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  List<DietPlan> _dietPlans =
      []; // Initialize as empty, will be fetched from Firestore
  List<String> _favoriteDietIds = [];

  List<DietPlan> get dietPlans => _dietPlans;
  List<String> get favoriteDietIds => _favoriteDietIds;
  List<DietPlan> get favoriteDietPlans =>
      _dietPlans.where((plan) => _favoriteDietIds.contains(plan.id)).toList();

  // Placeholder method to fetch diet plans
  Future<void> fetchDietPlans() async {
    print('DietService: Fetching diet plans from Firestore');
    try {
      final snapshot =
          await _firestore
              .collection('dietPlans')
              .get(); // Firestore collection name
      _dietPlans =
          snapshot.docs.map((doc) {
            final data = doc.data();
            return DietPlan(
              id: doc.id, // Use Firestore document ID
              name: data['name'] ?? '',
              description: data['description'] ?? '',
              meals:
                  (data['meals'] as List?)
                      ?.map((e) => Map<String, dynamic>.from(e))
                      .toList() ??
                  [],
            );
          }).toList();
      print('DietService: Fetched ${_dietPlans.length} diet plans');
      notifyListeners();
    } catch (e) {
      print('Error fetching diet plans: $e');
    }
  }

  Future<void> addDietPlan(DietPlan dietPlan) async {
    print('DietService: Adding diet plan to Firestore');
    try {
      DocumentReference docRef = await _firestore
          .collection('dietPlans')
          .add(dietPlan.toMap());
      await fetchDietPlans(); // Refetch to include the new one
      print('DietService: Diet plan added with ID: ${docRef.id}');
    } catch (e) {
      print('Error adding diet plan: $e');
    }
  }

  // Placeholder method to get a specific diet plan by ID
  DietPlan? getDietPlanById(String id) {
    try {
      // Ensure ID matching is correct, especially if IDs are auto-generated by Firestore
      // This might need adjustment if 'id' field in model is not the Firestore document ID
      return _dietPlans.firstWhere((plan) => plan.id == id);
    } catch (e) {
      return null;
    }
  }

  Future<void> fetchFavoriteDiets(BuildContext context) async {
    final authService = Provider.of<AuthService>(context, listen: false);
    final user = authService.currentUser;
    if (user == null) {
      _favoriteDietIds = [];
      return;
    }
    final favSnapshot =
        await _firestore
            .collection('users')
            .doc(user.id)
            .collection('diet_favorites')
            .get();
    _favoriteDietIds = favSnapshot.docs.map((doc) => doc.id).toList();
  }

  Future<void> toggleFavoriteDiet(
    BuildContext context,
    String dietPlanId,
  ) async {
    final authService = Provider.of<AuthService>(context, listen: false);
    final user = authService.currentUser;
    if (user == null) return;
    final favRef = _firestore
        .collection('users')
        .doc(user.id)
        .collection('diet_favorites')
        .doc(dietPlanId);
    final isFav = _favoriteDietIds.contains(dietPlanId);
    if (isFav) {
      await favRef.delete();
      _favoriteDietIds.remove(dietPlanId);
    } else {
      await favRef.set({'createdAt': FieldValue.serverTimestamp()});
      _favoriteDietIds.add(dietPlanId);
    }
    notifyListeners();
  }

  bool isFavoriteDiet(String dietPlanId) {
    return _favoriteDietIds.contains(dietPlanId);
  }
}
